<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[lyyyuna 的小花园]]></title>
  <subtitle><![CDATA[动静中之动]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://lyyyuna.github.io/"/>
  <updated>2015-08-30T03:20:57.560Z</updated>
  <id>http://lyyyuna.github.io/</id>
  
  <author>
    <name><![CDATA[lyyyuna]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[Hello World]]></title>
    <link href="http://lyyyuna.github.io/2015/08/30/hello-world/"/>
    <id>http://lyyyuna.github.io/2015/08/30/hello-world/</id>
    <published>2015-08-30T09:55:01.839Z</published>
    <updated>2015-08-30T03:20:57.560Z</updated>
    <content type="html"><![CDATA[<p>Welcome to <a href="http://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="http://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="http://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick_Start">Quick Start</h2><h3 id="Create_a_new_post">Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run_server">Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate_static_files">Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy_to_remote_sites">Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Welcome to <a href="http://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="http://hexo.io]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[shellcode学习-绕过条件判断]]></title>
    <link href="http://lyyyuna.github.io/2015/08/30/shellcode1/"/>
    <id>http://lyyyuna.github.io/2015/08/30/shellcode1/</id>
    <published>2015-08-30T08:36:38.000Z</published>
    <updated>2015-08-30T08:42:01.650Z</updated>
    <content type="html"><![CDATA[<p>shellcode学习第一个例子。</p>
<p>以下有一段c语言编写的命令行程序，检验用户输入的数字，并判断是否合法。这里用户的输入被放在了函数的缓冲区里，但程序没有对缓冲区长度做检查，留下了漏洞。这里可以利用该漏洞绕过数字检察，使得任意输入都会被判定为正确。<br>在 _validate<em>serial</em> 中，_do_valid<em>stuff</em> 的地址溢出到函数的返回值上，就可实现。</p>
<h2 id="源程序">源程序</h2><pre><code><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span>
<span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span>
<span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span>

<span class="function"><span class="keyword">int</span> <span class="title">valid_serial</span><span class="params">(<span class="keyword">char</span> * psz)</span>
</span>{
    <span class="keyword">size_t</span> len = <span class="built_in">strlen</span>(psz);
    <span class="keyword">unsigned</span> total = <span class="number">0</span>;
    <span class="keyword">size_t</span> i;

    <span class="keyword">if</span> (len&lt;<span class="number">10</span>)
        <span class="keyword">return</span> <span class="number">0</span>;

    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; len; i++)
    {
        <span class="keyword">if</span> ((psz[i]&lt;<span class="string">'0'</span>) || (psz[i]&gt;<span class="string">'z'</span>))
            <span class="keyword">return</span> <span class="number">0</span>;
        total += psz[i];
    }

    <span class="keyword">if</span> (total % <span class="number">853</span> == <span class="number">83</span>)
        <span class="keyword">return</span> <span class="number">1</span>;

    <span class="keyword">return</span> <span class="number">0</span>;    
}

<span class="function"><span class="keyword">int</span> <span class="title">valildate_serial</span><span class="params">()</span>
</span>{
    <span class="keyword">char</span> serial[<span class="number">24</span>];

    <span class="built_in">fscanf</span>(<span class="built_in">stdin</span>, <span class="string">"%s"</span>, serial);

    <span class="keyword">if</span> (valid_serial(serial))
        <span class="keyword">return</span> <span class="number">1</span>;
    <span class="keyword">else</span>
        <span class="keyword">return</span> <span class="number">0</span>;
}

<span class="function"><span class="keyword">int</span> <span class="title">do_valid_stuff</span><span class="params">()</span>
</span>{
    <span class="built_in">printf</span>(<span class="string">"the serial number is valid!\n"</span>);
    <span class="built_in">exit</span>(<span class="number">0</span>);
}

<span class="function"><span class="keyword">int</span> <span class="title">do_invalid_stuff</span><span class="params">()</span>
</span>{
    <span class="built_in">printf</span>(<span class="string">"invalid serial number!\nexiting\n"</span>);
    <span class="built_in">exit</span>(<span class="number">1</span>);
}

<span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> * argv[])</span>
</span>{
    <span class="keyword">if</span> (valildate_serial())
        do_valid_stuff();
    <span class="keyword">else</span>
        do_invalid_stuff();

    <span class="keyword">return</span> <span class="number">0</span>;
}
</code></pre><h2 id="反汇编main">反汇编main</h2><pre><code>(gdb) disass main
Dump of assembler code <span class="keyword">for</span> function main:
   <span class="number">0x0804861a</span> &lt;+<span class="number">0</span>&gt;:     push   %ebp
   <span class="number">0x0804861b</span> &lt;+<span class="number">1</span>&gt;:     mov    %esp,%ebp
   <span class="number">0x0804861d</span> &lt;+<span class="number">3</span>&gt;:     call   <span class="number">0x804859f</span> &lt;valildate_serial&gt;
   <span class="number">0x08048622</span> &lt;+<span class="number">8</span>&gt;:     test   %eax,%eax
   <span class="number">0x08048624</span> &lt;+<span class="number">10</span>&gt;:    je     <span class="number">0x804862d</span> &lt;main+<span class="number">19</span>&gt;
   <span class="number">0x08048626</span> &lt;+<span class="number">12</span>&gt;:    call   <span class="number">0x80485de</span> &lt;do_valid_stuff&gt;
   <span class="number">0x0804862b</span> &lt;+<span class="number">17</span>&gt;:    jmp    <span class="number">0x8048632</span> &lt;main+<span class="number">24</span>&gt;
   <span class="number">0x0804862d</span> &lt;+<span class="number">19</span>&gt;:    call   <span class="number">0x80485fc</span> &lt;do_invalid_stuff&gt;
   <span class="number">0x08048632</span> &lt;+<span class="number">24</span>&gt;:    mov    $<span class="number">0x0</span>,%eax
   <span class="number">0x08048637</span> &lt;+<span class="number">29</span>&gt;:    pop    %ebp
   <span class="number">0x08048638</span> &lt;+<span class="number">30</span>&gt;:    ret
End of assembler dump.
</code></pre><p>可得到 _do_valid<em>stuff</em> 的地址为 0x08048626。_validate<em>serial</em> 的返回地址为 0x08048622。下面就通过溢出修改返回地址。</p>
<h2 id="缓冲区溢出">缓冲区溢出</h2><p>源码中，缓冲区长度为24，理论上只要覆盖24+2处的数据就可以了。我们需要检验一下，在fscanf处打断点，观察堆栈内容。</p>
<pre><code>Breakpoint <span class="number">1</span>, valildate_serial () at serial.c:<span class="number">31</span>
<span class="number">31</span>          <span class="built_in">fscanf</span>(<span class="built_in">stdin</span>, <span class="string">"%s"</span>, serial);
(gdb) x/<span class="number">20</span>x $esp
<span class="number">0xbffff6bc</span>:     <span class="number">0x0804869b</span>      <span class="number">0x00000001</span>      <span class="number">0xbffff794</span>      <span class="number">0xbffff79c</span>
<span class="number">0xbffff6cc</span>:     <span class="number">0xbffff6e8</span>      <span class="number">0xb7e987f5</span>      <span class="number">0xb7ff0590</span>      <span class="number">0x0804865b</span>
<span class="number">0xbffff6dc</span>:     <span class="number">0xb7fc7ff4</span>      <span class="number">0xbffff6e8</span>      <span class="number">0x08048622</span>      <span class="number">0xbffff768</span>
<span class="number">0xbffff6ec</span>:     <span class="number">0xb7e7fe46</span>      <span class="number">0x00000001</span>      <span class="number">0xbffff794</span>      <span class="number">0xbffff79c</span>
<span class="number">0xbffff6fc</span>:     <span class="number">0xb7fe0860</span>      <span class="number">0xb7ff6821</span>      <span class="number">0xffffffff</span>      <span class="number">0xb7ffeff4</span>
(gdb)c
AAAAAAAAAABBBBBBBBBBCCCCCCCC1234

Breakpoint <span class="number">2</span>, valildate_serial () at serial.c:<span class="number">33</span>
<span class="number">33</span>          <span class="keyword">if</span> (valid_serial(serial))
(gdb) x/<span class="number">20</span>x $esp
<span class="number">0xbffff6bc</span>:     <span class="number">0xb7fc8440</span>      <span class="number">0x080486d0</span>      <span class="number">0xbffff6c8</span>      <span class="number">0x41414141</span>
<span class="number">0xbffff6cc</span>:     <span class="number">0x41414141</span>      <span class="number">0x42424141</span>      <span class="number">0x42424242</span>      <span class="number">0x42424242</span>
<span class="number">0xbffff6dc</span>:     <span class="number">0x43434343</span>      <span class="number">0x43434343</span>      <span class="number">0x34333231</span>      <span class="number">0xbffff700</span>
<span class="number">0xbffff6ec</span>:     <span class="number">0xb7e7fe46</span>      <span class="number">0x00000001</span>      <span class="number">0xbffff794</span>      <span class="number">0xbffff79c</span>
<span class="number">0xbffff6fc</span>:     <span class="number">0xb7fe0860</span>      <span class="number">0xb7ff6821</span>      <span class="number">0xffffffff</span>      <span class="number">0xb7ffeff4</span>
(gdb)
</code></pre><p>可以看到“1234”对应的ascii码“0x34333231”已经被写入了返回值”0x08048622”原来所在的地方。<br>接下来把“1234”换成我们需要的返回地址。</p>
<p>我们回到shell中实验一下</p>
<pre><code>lyyyuna<span class="variable">@yan</span><span class="symbol">:~/Desktop/shellcode/validate_serial</span><span class="variable">$ </span>printf <span class="string">"AAAAAAAAAABBBBBBBBBBCCCCCCCC\x26\x86\x04\x08"</span> | ./serial
the serial number is valid!
</code></pre><p>成功绕过了程序的检验机制。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>shellcode学习第一个例子。</p>
<p>以下有一段c语言编写的命令行程序，检验用户输入的数字，并判断是否合法。这里用户的输入被放在了函数的缓冲区里，但程序没有对缓冲区长度做检查，留下了漏洞。这里可以利用该漏洞绕过数字检察，使得任意输入都会被判定为正确。<br>在 ]]>
    </summary>
    
      <category term="shellcode" scheme="http://lyyyuna.github.io/tags/shellcode/"/>
    
  </entry>
  
</feed>
